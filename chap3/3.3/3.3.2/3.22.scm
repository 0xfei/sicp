(define (make-queue)
  (let ((head '())
        (tail '()))
    (define (insert data)
      (let ((item (cons data '())))
        (cond ((null? head) (set! head item) (set! tail item) head)
              (else (set-cdr! tail item) (set! tail item) head))))
    (define (delete)
      (if (null? head)
        '()
        (begin (set! head (cdr head)) head)))
    (define (front)
      (if (null? head)
        '()
        (car head)))
    (define (dispatch m)
      (cond ((eq? m 'insert) insert)
            ((eq? m 'delete) (delete))
            ((eq? m 'front) (front))
            (else "Error")))
    dispatch))

