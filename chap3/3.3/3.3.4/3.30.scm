(define (half-adder a b s c)
  (let ((d (make-wire))
        (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))

(define (full-adder a b c-in sum c-out)
  (let ((s (make-wire))
        (c1 (make-wire))
        (c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))

(define (ripple-carry-adder ak bk sk c)
  (cond ((null? ak) c)
        (else (let ((c1 (make-wire)) 
                    (s1 (car s1))
                    (a1 (car ak))
                    (b1 (car bk))
                    (la (cdr ak))
                    (lb (cdr bk))
                    (ls (cdr sk)))
                (full-adder a1 b1 c s1 c1)
                (set-car! sk s1)
                (ripple-carry-adder la lb ls c1)))))

