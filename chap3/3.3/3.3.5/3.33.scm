; constriant
(define (adder a b c)
  (define (process-new-value)
    (cond ((and (has-value? a) (has-value? b))
           (set-value! c (+ (get-value a) (get-value b)) me))
          ((and (has-value? a) (has-value? c))
           (set-value! b (- (get-value c) (get-value a)) me))
          ((and (has-value? b) (has-value? c))
           (set-value! a (- (get-value c) (get-value b)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! c me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'set-value)
           (process-new-value))
          ((eq? request 'forget-value)
           (process-forget-value))
          (else
            (error "Error request"))))
  (connect a me)
  (connect b me)
  (connect c me)
  me)

(define (multi a b c)
  (define (process-new-value)
    (cond ((or (and (has-value? a) (= (get-value a) 0))
               (and (has-value? b) (= (get-value b) 0)))
           (set-value! c 0 me))
          ((and (has-value? a) (has-value? b))
           (set-value! c (* (get-value a) (get-value b)) me))
          ((and (has-value? a) (has-value? c))
           (set-value! b (/ (get-value c) (get-value a)) me))
          ((and (has-value? b) (has-value? c))
           (set-value! a (/ (get-value c) (get-value b)) me))))
  (define (process-forget-value)
    (forget-value! a me)
    (forget-value! b me)
    (forget-value! c me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'set-value)
           (process-new-value))
          ((eq? request 'forget-value)
           (process-forget-value))
          (else
            (error "Error request"))))
  (connect a me)
  (connect b me)
  (connect c me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Error request"))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (probe name connector)
  (define (print value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print (get-value connector)))
  (define (process-forget-value)
    (print (get-value connector))) 
  (define (me request)
    (cond ((eq? request 'set-value)
           (process-new-value))
          ((eq? request 'forget-value)
           (process-forget-value))
          (else
            (error "Error request"))))
  (connect connector me)
  me)

(define (notify-const-new-value c)
  (c 'set-value))
(define (notify-const-forget-value c)
  (c 'forget-value))

;; connector
(define (make-connector)
  (let ((value false) (informant false) (constriants '()))
    (define (set-value newvalue setter)
      (cond ((not (has-value? me))
             (set! value newvalue)
             (set! informant setter)
             (for-each-except setter
                              notify-const-new-value
                              constriants))
            ((not (= value newvalue))
             (error "Error , not valid set value"))
            (else 'ignored)))
    (define (forget-value setter)
      (if (eq? setter informant)
        (begin (set! informant false)
               (set! value false)
               (for-each-except setter
                                notify-const-forget-value
                                constriants))
        'ignored))
    (define (connect const)
      (if (not (memq const constriants))
        (set! constriants (cons const constriants)))
      (if (has-value? me)
        (notify-const-new-value const))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
             (if informant true false))
            ((eq? request 'get-value) value)
            ((eq? request 'set-value!) set-value)
            ((eq? request 'forget-value) forget-value)
            ((eq? request 'connect) connect)
            (else (error "Error request"))))
    me))

(define (for-each-except e f l)
  (define (loop items)
    (cond ((null? items) 'done)
          ((eq? (car items) e) (loop (cdr items)))
          (else (f (car items))
                (loop (cdr items)))))
  (loop l))

(define (has-value? connector)
  (connector 'has-value?))
(define (get-value connector)
  (connector 'get-value))
(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))
(define (forget-value! connector setter)
  ((connector 'forget-value) setter))
(define (connect connector const)
  ((connector 'connect) const))

; average
(define a (make-connector))
(define b (make-connector))
(define c (make-connector))
(define (avg a b c)
  (define d (make-connector))
  (constant 2.0 d)
  (define p (make-connector))
  (multi d c p)
  (adder a b p))

(avg a b c)

