(define (install-raise)
  (define (num->rat num)
    (list ('rat num 1)))
  (define (rat->real rat)
    (list ('real (/ (* 1.0 (cadr rat)) (caddr rat)))))
  (define (real->comp real)
    (list ('comp real 0)))
  (put-coersion 'num 'rat num->rat)
  (put-coersion 'rat 'real rat->real)
  (put-coersion 'real 'comp real->comp))

(define (raise data)
  (define (do-raise t)
    (let ((t1 (car t))
          (left (cdr t))
          (t2 (car left)))
      (if (eq? (type-tag data) t1)
        ((get-coersion t1 t2) data)
        (do-raise left))))
  (do-raise '(() rat real comp)))
